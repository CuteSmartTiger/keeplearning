SHELL:=/bin/bash
name=vdidesktop-desktop
site=192.168.5.8:5001
image=$(site)/$(name)

novnc_image = $(site)/novnc-websocket
novnc_name = vdidesktop-novnc

node1=192.168.6.87
node2=192.168.6.88
node3=192.168.6.89
localnode=192.168.6.87

etcd_node1=etcd_$(node1)
etcd_node2=etcd_$(node2)
etcd_node3=etcd_$(node3)
etcd_localnode=etcd_$(localnode)

NOW=$(shell date +%Y%m%d-%H%M%S-%N)
export NOW

# default constants
MYSQL_PASSWORD := '123123'

all:

help:
	@echo -en "\033[0m\033[1m\033[38m"
	@echo [Usage]
	@echo "  Images:"
	@echo -en "\033[0m\033[1m\033[34m"
	@echo -e "    make pull    \033[0m\033[1m\033[31mTAG=xxxx\033[0m\033[1m\033[34m                Pull an image and active it"
	@echo -en "\033[0m\033[34m"
	@echo "    make pull-all                          Pull all tagged images in the repository"
	@echo "    make rmi    [TAG=xxxx]                 Remove an image, Default: remove <latest>"
	@echo "    make active [TAG=xxxx]                 Active an image to be running on, Default: active <latest>"
	@echo "    make show_active                       Show active tags"
	@echo "    make images                            Print images"
	@echo -en "\033[0m\033[1m\033[38m"
	@echo "  Operations:"
	@echo -en "\033[0m\033[1m\033[34m"
	@echo "    make run    [TAG=xxxx]                 Run, Default: run <active>"
	@echo "    make start                             Start $(name)"
	@echo "    make stop                              Stop $(name)"
	@echo "    make restart                           Restart $(name)"
	@echo "    make rm                                Remove all containers"
	@echo "    make ps                                Print ps of containers"
	@echo -e "    make upgrade \033[0m\033[1m\033[31mTAG=xxxx\033[0m\033[1m\033[34m                  Upgrade containers"
	@echo -en "\033[0m\033[34m"
	@echo "    make start-all                         Start all containers"
	@echo "    make stop-all                          Stop all containers"
	@echo "    make restart-all                       Restart all containers"
	@echo "    make renew                             Shortcut for make rm && make run"
	@echo -en "\033[0m\033[1m\033[38m"
	@echo "  Trouble shooting:"
	@echo -en "\033[0m\033[1m\033[34m"
	@echo "    make log                               Print log of $(name)"
	@echo "    make dump-logs [RM=1]                  Dump logs of $(name), Default: RM=0, do NOT remove log"
	@echo -en "\033[0m\033[34m"
	@echo "    make console                           Get a console shell of $(name)"
	@echo "    make run-console [TAG=xxxx]            Run in console mode, Default: run <active>"
	@echo "    make clean                             Clean unused images and volumes"
	@echo "    make revision                          Print revision of $(name)"
	@echo -en "\033[0m\033[37m"
	@echo "  Maintainance(experimental):"
	@echo "    make backup TO=xxx.sql                 Backup database to xxx.sql"
	@echo "    make restore FROM=xxx.sql              Restore database from xxx.sql"
	@echo "    make snapshot                          Take a snapshot"
	@echo "  Service/Cluster(experimental):"
	@echo "    make cluster                           Initialize a swarm cluster"
	@echo "    make token                             Get swarm token from swarm manager"
	@echo "    make service-start  TAG=xxxx [NUM=x]   Start cluster services"
	@echo "    make service-stop                      Stop cluster services"
	@echo "    make service-ps                        Show status of cluster services"
	@echo "    make service-ls                        List cluster services"
	@echo "    make volume-create NFS=<host>:<dir>    Create nfs volume (please do this on every node manually)"
	@echo -en "\033[0m"



login:
	docker login -u weifuinfo -p weifuinfo.com $(site)

active:
ifdef TAG
	docker tag $(image):$(TAG) $(image):active
else
	docker tag $(image):latest $(image):active
endif

show_active:
	@docker images | sed 1d | grep $(name) | awk '{ver[NR]=$$2; dig[NR]=$$3; if($$2 == "active"){active=$$3;}} END{for (i=1;i<NR+1;i++){ if(dig[i] == active && ver[i] != "active"){print "active -> " ver[i]}}}'

pull:
ifdef TAG
	docker pull $(image):$(TAG)
	@make --no-print-directory active
else
	@docker pull $(image):latest
	@docker tag $(image):latest $(image):active
endif

pull-all:
	@docker pull -a $(image)

run: mysql-run redis-run novnc-run
ifdef TAG
	docker run -d -t --link vdidesktop-mysql --link vdidesktop-redis -v $(shell pwd)/mnt/salt/pki:/etc/salt/pki -v /var/log/vdidesktop:/var/log/vdidesktop -v /var/log/salt:/var/log/salt -v /var/log/nginx:/var/log/nginx -v $(shell pwd)/mnt/salt/cache:/var/cache/salt -v $(shell pwd)/mnt/uploads:/opt/vdidesktop/app/static/uploads -v /etc/localtime:/etc/localtime:ro --name=$(name) -p 80:80 -p 4505:4505 -p 4506:4506 -p 8000:8000 $(image):$(TAG)
#	docker run -d -t --link vdidesktop-mysql --link vdidesktop-redis -v $(shell pwd)/mnt/salt/pki:/etc/salt/pki -v $(shell pwd)/mnt/salt/cache:/var/cache/salt -v $(shell pwd)/mnt/uploads:/opt/vdidesktop/app/static/uploads -v /etc/localtime:/etc/localtime:ro -v /var/log/vdidesktop/vdidesktop:/var/log --name=$(name) -p 80:80 -p 4505:4505 -p 4506:4506 -p 8000:8000 $(image):$(TAG)
else
	docker run -d -t --link vdidesktop-mysql --link vdidesktop-redis -v $(shell pwd)/mnt/salt/pki:/etc/salt/pki -v /var/log/vdidesktop:/var/log/vdidesktop -v /var/log/salt:/var/log/salt -v /var/log/nginx:/var/log/nginx -v $(shell pwd)/mnt/salt/cache:/var/cache/salt -v $(shell pwd)/mnt/uploads:/opt/vdidesktop/app/static/uploads -v /etc/localtime:/etc/localtime:ro --name=$(name) -p 80:80 -p 4505:4505 -p 4506:4506 -p 8000:8000 $(image):active
#	docker run -d -t --link vdidesktop-mysql --link vdidesktop-redis -v $(shell pwd)/mnt/salt/pki:/etc/salt/pki -v $(shell pwd)/mnt/salt/cache:/var/cache/salt -v $(shell pwd)/mnt/uploads:/opt/vdidesktop/app/static/uploads -v /etc/localtime:/etc/localtime:ro -v /var/log/vdidesktop/vdidesktop:/var/log --name=$(name) -p 80:80 -p 4505:4505 -p 4506:4506 -p 8000:8000 $(image):active
endif

run-console:
ifdef TAG
	docker run -d -t --link vdidesktop-mysql --link vdidesktop-redis -v $(shell pwd)/mnt/salt/pki:/etc/salt/pki -v /var/log/vdidesktop:/var/log/vdidesktop -v /var/log/salt:/var/log/salt -v /var/log/nginx:/var/log/nginx -v $(shell pwd)/mnt/salt/cache:/var/cache/salt -v $(shell pwd)/mnt/uploads:/opt/vdidesktop/app/static/uploads -v /etc/localtime:/etc/localtime:ro -v /var/log/vdidesktop/vdidesktop:/var/log --name=$(name) -p 80:80 -p 4505:4505 -p 4506:4506 -p 8000:8000 $(image):$(TAG) /bin/bash
else
	docker run -d -t --link vdidesktop-mysql --link vdidesktop-redis -v $(shell pwd)/mnt/salt/pki:/etc/salt/pki -v /var/log/vdidesktop:/var/log/vdidesktop -v /var/log/salt:/var/log/salt -v /var/log/nginx:/var/log/nginx -v $(shell pwd)/mnt/salt/cache:/var/cache/salt -v $(shell pwd)/mnt/uploads:/opt/vdidesktop/app/static/uploads -v /etc/localtime:/etc/localtime:ro -v /var/log/vdidesktop/vdidesktop:/var/log --name=$(name) -p 80:80 -p 4505:4505 -p 4506:4506 -p 8000:8000 $(image):active /bin/bash
endif

start: novnc-start etcd-start
	docker start $(name) || :

stop: novnc-stop
	docker stop $(name) || :


sleep:
	sleep 1

restart: stop sleep start

start-all: mysql-start redis-start start
stop-all: mysql-stop redis-stop stop
restart-all: stop-all sleep start-all

rmi-desktop:
ifdef TAG
	docker rmi $(image):$(TAG) || :
else
	@docker rmi $(image):latest && docker rmi $(image):active || :
        #@rm -rf /opt/docker/mnt
endif

rm-only: stop
	docker rm $(name) || :
	docker rm $(novnc_name) || :

rm: stop mysql-rm redis-rm
	docker rm $(name) || :
rm-all:
	@docker rm $$(docker ps -a -q)

renew: rm run
recreate: renew

console:
	@docker exec -it $(name) env LANG=C.UTF-8 /bin/bash

ps:
	@docker ps -a

images:
	@docker images

log:
	@docker logs $(name)

revision:
	@docker exec $(name) cat .revision

dump-logs:
	@mkdir -p logs/$${NOW}	\
	&& docker logs -t $(name) > logs/$${NOW}/logs.log	\
	&& docker cp $(name):/var/log/vdidesktop/vdidesktop.log logs/$${NOW}/	\
	&& docker cp $(name):/var/log/vdidesktop/celery.log logs/$${NOW}/	\
	&& docker cp $(name):/opt/vdidesktop/.revision logs/$${NOW}/		\
	&& tar jcf logs/$(name).$${NOW}.tar.bz2 -C logs/  $${NOW}/		\
	&& rm -rf logs/$${NOW}					\
	&& echo logs have been outputted to logs/$(name).$${NOW}.tar.bz2
	echo $${NOW}
ifeq ($(RM),1)
	@docker exec $(name) bash -c "echo ----- TRUNCATED $${NOW} ----- > /var/log/vdidesktop/vdidesktop.log"
	@docker exec $(name) bash -c "echo ----- TRUNCATED $${NOW} ----- > /var/log/vdidesktop/celery.log"
endif

maintenance: stop

backup: mysql-backup

restore: mysql-restore

snapshot:
	@mkdir -p snapshots/$${NOW}	\
	&& cp -a mnt/  snapshots/$${NOW}/	\
	&& docker cp $(name):/opt/vdidesktop/.revision snapshots/$${NOW}/	\
	&& tar jcf snapshots/$(name).$${NOW}.tar.bz2 -C snapshots/  $${NOW}/  \
	&& rm -rf snapshots/$${NOW}	\
	&& echo snapshot has been taken, outputted to snapshots/$(name).$${NOW}.tar.bz2

ifdef TAG
upgrade: pull stop-all snapshot renew
else
upgrade:
	@echo -en "\033[0m\033[1m\033[31m"
	@echo "Error: variable TAG should been given"
	@echo -en "\033[0m"
	@exit 1
endif

production:

clean:
	docker volume ls -qf dangling=true | xargs -r docker volume rm
	docker images | grep "<none>" | grep -v "^<none>" | awk '{print $$3}' | xargs -n 1 docker rmi

# mysql
mysql_image = mysql/mysql-server:5.5
mysql_name = vdidesktop-mysql

mysql-run:
	docker run -d -it -v $(shell pwd)/mnt/mysql:/var/lib/mysql -v /var/log/mysql:/var/log -p 3306:3306 -e MYSQL_ROOT_PASSWORD=$(MYSQL_PASSWORD) -e MYSQL_ROOT_HOST=% --name=$(mysql_name) $(mysql_image) --character-set-server=utf8 || :

mysql-rm: mysql-stop
	docker rm $(mysql_name) || :

mysql-start:
	docker start $(mysql_name) || :

mysql-stop:
	docker stop $(mysql_name) || :

mysql-console:
	docker exec -it $(mysql_name) /bin/bash || :

ifdef TO
mysql-backup:
	docker exec $(mysql_name)    mysqldump -uroot -p$(MYSQL_PASSWORD) desktop > $(TO)
else
mysql-backup:
	@echo -en "\033[0m\033[1m\033[31m"
	@echo "Error: variable TO should been given"
	@echo -en "\033[0m"
	@exit 1
endif

ifdef FROM
mysql-restore:
	cat $(FROM) | docker exec -i $(mysql_name) mysql -uroot -p$(MYSQL_PASSWORD) desktop
else
mysql-restore:
	@echo -en "\033[0m\033[1m\033[31m"
	@echo "Error: variable FROM should been given"
	@echo -en "\033[0m"
	@exit 1
endif


# redis
redis_image = redis
redis_name = vdidesktop-redis

redis-run:
	docker run -d -it -v /var/log/redis:/var/log --name=$(redis_name) $(redis_image) || :

redis-rm: redis-stop
	docker rm $(redis_name) || :

redis-start:
	docker start $(redis_name) || :

redis-stop:
	docker stop $(redis_name) || :

redis-console:
	docker exec -it $(redis_name) /bin/bash

# etcd

etcd-run:
	docker run -d -v /usr/share/ca-certificates/:/etc/ssl/certs -p 4001:4001 -p 2380:2380 -p 2379:2379 --restart=always \
--name etcd quay.io/coreos/etcd:v3.3.8 \
etcd -name $(etcd_localnode) \
-advertise-client-urls http://$(localnode):2379,http://$(localnode):4001 \
-listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \
-initial-advertise-peer-urls http://$(localnode):2380 \
-listen-peer-urls http://0.0.0.0:2380 \
-initial-cluster-token etcd-cluster-1 \
-initial-cluster $(etcd_node1)=http://$(node1):2380,$(etcd_node2)=http://$(node2):2380,$(etcd_node3)=http://$(node3):2380 \
-initial-cluster-state new

etcd-start:
	docker start etcd || :

# novnc

novnc-run:
	docker run -dt --name=$(novnc_name) -v /var/log/novnc:/var/log/novnc -p 6080:6080 $(novnc_image) || :

novnc-rm: novnc-stop
	docker rm $(novnc_name) || :

novnc-start:
	docker start $(novnc_name) || :

novnc-stop:
	docker stop $(novnc_name) || :

novnc-console:
	docker exec -it $(novnc_name) /bin/bash


# installation
define CA
-----BEGIN CERTIFICATE-----
MIIDiTCCAnGgAwIBAgIJAOAdNopu1biPMA0GCSqGSIb3DQEBCwUAMFsxCzAJBgNV
BAYTAkNOMREwDwYDVQQIDAhTaGFuZ2hhaTEhMB8GA1UECgwYSW50ZXJuZXQgV2lk
Z2l0cyBQdHkgTHRkMRYwFAYDVQQDDA13ZWlmdWluZm8uY29tMB4XDTE2MTAxOTA5
MzAwOVoXDTI2MTAxNzA5MzAwOVowWzELMAkGA1UEBhMCQ04xETAPBgNVBAgMCFNo
YW5naGFpMSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQxFjAUBgNV
BAMMDXdlaWZ1aW5mby5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
AQClOB5zUugh17yTiCgu70us+YlDvAUy6Pq16OCzPY52mYmLLexkzjjylyKU8M5d
ESD78ltOKAH9jc/3s5Svs7JM7Dhy5kXWQIhAFmWcilTHlsiWAN8ZI/39hCfP81OY
LKQ9bRSF/rsM+Fl63q77iGCS4wkEtknzAmTpTpt3s4/OR1uJ64yfG0dBEvP/1Q6H
++fd//MpdSZnlMaBFZ/WAkUVWWn7y7DR3objulBmhCULhpoFwW9p3enY0Hwut67J
AYSkio7TX+4mcLlFHP32K+gngF1h0olq4ko1ygbcXJjCKjhaXUKf3vqo6Qmhd8Il
GdSB1jFU0z0530FBQ6xAESiZAgMBAAGjUDBOMB0GA1UdDgQWBBRfj5RxJYmRO3H/
u7eLgx4b3bnCaTAfBgNVHSMEGDAWgBRfj5RxJYmRO3H/u7eLgx4b3bnCaTAMBgNV
HRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBjzxvlmJz0Vh3s0zA+7Jl0Ztxs
4wU9PLW4fxJ9LdaF57MAcI154OU8SgJUG27koyniFdizrGahgduhF2N3w0Y2k8Qi
oy5Oj/e1p5eDEbth2zkWG8q/TX9PoJss2zpmXHNuVSVqCHKFttZCwyY+ar075Q9h
wUaT2pRw6+y2ndnZm70HitFg09fFjwCI7KlY9VPCUW6XLJim0fqaZHknJZusyKnz
ldgEosOFeK/HLDPj3lqqHiqp9mYsIF9iMcFkt1AwCjFA7E2kH2CaJcOdvnB5PG+R
Zp7ZVc4ks6DhWuVx5WY9ZiB5wnzdrDgr1g4On0AekWmKO7FfCkqvn7NYn++U
-----END CERTIFICATE-----
endef
export CA

install-docker:
	apt-get update \
	&& apt-get install -y docker.io

install-config:
	@mkdir -p /etc/docker/certs.d/$(site)   \
	&& echo "$${CA}" > /etc/docker/certs.d/$(site)/ca.crt \
	&& sed -e '/#WEIFUINFO_CONFIG/,+1d' -i /etc/default/docker \
	&& echo -e '#WEIFUINFO_CONFIG\nDOCKER_OPTS="--insecure-registry $(site)"' >> /etc/default/docker
	@echo 'IMPORTANT: Please restart your server to make this operation take effect'

uninstall-config:
	@rm -rf /etc/docker/certs.d/$(site)
	&& sed -e '/#WEIFUINFO_CONFIG/,+1d' -i /etc/default/docker
	@echo 'IMPORTANT: Please restart your server to make this operation take effect'

install: install-docker install-config

uninstall: uninstall-config

# service (useless)

swarm:
ifdef FORCE
	@docker swarm init --force-new-cluster
else
	@docker swarm init
endif

cluster: swarm

token:
	@docker swarm join-token worker
	@docker swarm join-token manager

leave:
ifdef FORCE
	@docker swarm leave
else
	@docker swarm leave --force
endif


ifdef NFS
get_nfs_host = $(firstword $(subst :, ,$1))
get_nfs_dir = $(or $(word 2,$(subst :, ,$1)),$(value 2))
NFS_HOST=$(call get_nfs_host,$(NFS))
NFS_DIR=$(call get_nfs_dir,$(NFS))
endif

network_name = "vdidesktop-cluster-net"
service_mysql_name = "vdidesktop-mysql"
service_redis_name = "vdidesktop-redis"
service_dm_name = "vdidesktop-dm"
service_desktop_name = "vdidesktop-desktop"
service_haproxy_name = "vdidesktop-haproxy"

volume-create: volume-rm
ifdef NFS
	docker volume create --driver local --opt type=nfs --opt o=addr=$(NFS_HOST),nolock --opt device=:$(NFS_DIR)/mysql --name $(service_mysql_name)
	docker volume create --driver local --opt type=nfs --opt o=addr=$(NFS_HOST) --opt device=:$(NFS_DIR)/salt/cache --name $(service_dm_name)-cache
	docker volume create --driver local --opt type=nfs --opt o=addr=$(NFS_HOST) --opt device=:$(NFS_DIR)/salt/pki --name $(service_dm_name)-pki
	docker volume create --driver local --opt type=nfs --opt o=addr=$(NFS_HOST) --opt device=:$(NFS_DIR)/uploads --name $(service_desktop_name)-uploads
else
	@echo -en "\033[0m\033[1m\033[31m"
	@echo "Error: variable NFS should been given"
	@echo -en "\033[0m"
	@exit 1
endif

volume-rm:
	docker volume rm $(service_mysql_name) $(service_dm_name)-cache $(service_dm_name)-pki $(service_desktop_name)-uploads || :

network-create: network-rm
	docker network create --driver overlay --subnet 10.20.30.0/24 $(network_name)
network-rm:
	docker network rm $(network_name) || :

NUM := 1

_service-start-basic:
	docker service create --network $(network_name) --name $(service_haproxy_name) --mount target=/var/run/docker.sock,source=/var/run/docker.sock,type=bind -p 80:80 -p 4505:4505 -p 4506:4506 -p 8000:8000 --constraint "node.role == manager" dockercloud/haproxy
	docker service create --network $(network_name) --name $(service_mysql_name)            --mount target=/var/lib/mysql,source=$(service_mysql_name) -e MYSQL_ROOT_PASSWORD=$(MYSQL_PASSWORD) -e MYSQL_ROOT_HOST='%'  $(mysql_image)
	docker service create --network $(network_name) --name $(service_redis_name)            $(redis_image)


_service-start-desktop: login
ifdef TAG
	docker service create --network $(network_name) --with-registry-auth --name $(service_dm_name)               --mount target=/var/cache/salt,source=$(service_dm_name)-cache --mount target=/etc/salt/pki,source=$(service_dm_name)-pki -e SERVICE_PORTS="4505,4506,8000" $(image):$(TAG) /entrypoint.sh dm
	docker service create --network $(network_name) --with-registry-auth --name $(service_desktop_name)-backend  $(image):$(TAG) /entrypoint.sh backend
	docker service create --network $(network_name) --with-registry-auth --name $(service_desktop_name)-frontend -e SERVICE_PORTS="80" --mount target=/opt/vdidesktop/app/static/uploads,source=$(service_desktop_name)-uploads --replicas=$(NUM) $(image):$(TAG) /entrypoint.sh frontend
else
	docker service create --network $(network_name) --with-registry-auth --name $(service_dm_name)               --mount target=/var/cache/salt,source=$(service_dm_name)-cache --mount target=/etc/salt/pki,source=$(service_dm_name)-pki -e SERVICE_PORTS="4505,4506,8000" $(image):active /entrypoint.sh dm
	docker service create --network $(network_name) --with-registry-auth --name $(service_desktop_name)-backend  $(image):active /entrypoint.sh backend
	docker service create --network $(network_name) --with-registry-auth --name $(service_desktop_name)-frontend -e SERVICE_PORTS="80" --mount target=/opt/vdidesktop/app/static/uploads,source=$(service_desktop_name)-uploads --replicas=$(NUM) $(image):active /entrypoint.sh frontend
endif

_service-start: _service-start-basic _service-start-desktop

_service-stop:
	docker service rm $(service_desktop_name)-frontend || :
	docker service rm $(service_desktop_name)-backend $(service_dm_name) $(service_redis_name) $(service_mysql_name) || :
	docker service rm $(service_haproxy_name) || :

ifdef TAG
service-start: network-create _service-start
else
service-start:
	@echo -en "\033[0m\033[1m\033[31m"
	@echo "Error: variable TAG should been given"
	@echo -en "\033[0m"
	@exit 1
endif

service-stop: _service-stop network-rm

service-ls:
	@docker service ls

service-ps:
	docker service ps $(service_haproxy_name)
	@echo
	docker service ps $(service_mysql_name)
	@echo
	docker service ps $(service_redis_name)
	@echo
	docker service ps $(service_dm_name)
	@echo
	docker service ps $(service_desktop_name)-backend
	@echo
	docker service ps $(service_desktop_name)-frontend

node:
	docker node ls
